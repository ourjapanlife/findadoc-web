/* eslint-disable */
import * as types from './graphql';
import type { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
const documents = {
    "\nquery GetAllFacilities($filters: FacilitySearchFilters!) {\n    facilities(filters: $filters) {\n        id\n        nameEn\n        nameJa\n        contact {\n            googleMapsUrl\n            email\n            phone\n            website\n            address {\n                postalCode\n                prefectureEn\n                cityEn\n                addressLine1En\n                addressLine2En\n                prefectureJa\n                cityJa\n                addressLine1Ja\n                addressLine2Ja\n            }\n        }\n        mapLatitude\n        mapLongitude\n        healthcareProfessionalIds\n        createdDate\n        updatedDate\n    }\n}": types.GetAllFacilitiesDocument,
    "\nmutation UpdateFacility($updateFacilityId: ID!, $input: UpdateFacilityInput!) {\n    updateFacility(id: $updateFacilityId, input: $input) {\n        id\n        nameEn\n        nameJa\n        contact {\n            googleMapsUrl\n            email\n            phone\n            website\n            address {\n                postalCode\n                prefectureEn\n                cityEn\n                addressLine1En\n                addressLine2En\n                prefectureJa\n                cityJa\n                addressLine1Ja\n                addressLine2Ja\n            }\n        }\n        mapLatitude\n        mapLongitude\n        healthcareProfessionalIds\n        createdDate\n        updatedDate\n    }\n}": types.UpdateFacilityDocument,
    "\nmutation DeleteFacility($deleteFacilityId: ID!) {\n    deleteFacility(id: $deleteFacilityId) {\n        isSuccessful\n    }\n}": types.DeleteFacilityDocument,
    "\nquery GetAllHealthcareProfessionals($filters: HealthcareProfessionalSearchFilters!) {\n    healthcareProfessionals(filters: $filters) {\n        id\n        names {\n            firstName\n            middleName\n            lastName\n            locale\n        }\n        spokenLanguages\n        degrees\n        specialties\n        acceptedInsurance\n        facilityIds\n        createdDate\n        updatedDate\n    }\n}": types.GetAllHealthcareProfessionalsDocument,
    "\nquery GetHealthcareProfessional($healthcareProfessionalId: ID!) {\n    healthcareProfessional(id: $healthcareProfessionalId) {\n        names {\n            firstName\n            lastName\n        }\n        id\n        specialties\n    }\n}": types.GetHealthcareProfessionalDocument,
    "\nmutation UpdatedHealthcareProfessional($updateHealthcareProfessionalId: ID!, $input: UpdateHealthcareProfessionalInput!) {\n    updateHealthcareProfessional(id: $updateHealthcareProfessionalId, input: $input) {\n        id\n        names {\n            firstName\n            middleName\n            lastName\n            locale\n        }\n        spokenLanguages\n        degrees\n        specialties\n        acceptedInsurance\n        facilityIds\n        createdDate\n        updatedDate\n    }\n}": types.UpdatedHealthcareProfessionalDocument,
    "\nmutation DeleteHealthcareProfessional($deleteHealthcareProfessionalId: ID!) {\n    deleteHealthcareProfessional(id: $deleteHealthcareProfessionalId) {\n        isSuccessful\n    }\n}": types.DeleteHealthcareProfessionalDocument,
    "\nquery SearchFacilitiesDropdown($filters: FacilitySearchFilters!) {\n    facilities(filters: $filters) {\n        id\n        contact {\n            address {\n                cityJa\n                cityEn\n            }\n        }\n    }\n}": types.SearchFacilitiesDropdownDocument,
    "\nquery GetAllSubmissions($filters: SubmissionSearchFilters!) {\n    submissions(filters: $filters) {\n        id\n        googleMapsUrl\n        healthcareProfessionalName\n        spokenLanguages\n        facility {\n            id\n            mapLatitude\n            mapLongitude\n            nameEn\n            nameJa\n            contact {\n                googleMapsUrl\n                email\n                phone\n                website\n                address {\n                    postalCode\n                    prefectureEn\n                    cityEn\n                    addressLine1En\n                    addressLine2En\n                    prefectureJa\n                    cityJa\n                    addressLine1Ja\n                    addressLine2Ja\n                }\n            }\n            healthcareProfessionalIds\n        }\n        healthcareProfessionals {\n            id\n            names {\n                firstName\n                middleName\n                lastName\n                locale\n            }\n            spokenLanguages\n            degrees\n            specialties\n            acceptedInsurance\n            facilityIds\n        }\n        isUnderReview\n        isApproved\n        isRejected\n        createdDate\n        updatedDate\n        notes\n    }\n}": types.GetAllSubmissionsDocument,
    "\nmutation UpdatedFacilitySubmission($id: ID!, $input: UpdateSubmissionInput!) {\n    updateSubmission(id: $id, input: $input) {\n        id\n        googleMapsUrl\n        healthcareProfessionalName\n        spokenLanguages\n        facility {\n            id\n            nameEn\n            nameJa\n            contact {\n                googleMapsUrl\n                email\n                phone\n                website\n                address {\n                    postalCode\n                    prefectureEn\n                    cityEn\n                    addressLine1En\n                    addressLine2En\n                    prefectureJa\n                    cityJa\n                    addressLine1Ja\n                    addressLine2Ja\n                }\n            }\n            healthcareProfessionalIds\n            mapLatitude\n            mapLongitude\n        }\n        healthcareProfessionals {\n            id\n            names {\n                firstName\n                middleName\n                lastName\n                locale\n            }\n            spokenLanguages\n            degrees\n            specialties\n            acceptedInsurance\n            facilityIds\n        }\n        isUnderReview\n        isApproved\n        isRejected\n        createdDate\n        updatedDate\n        notes\n    }\n}": types.UpdatedFacilitySubmissionDocument,
    "\nquery SearchHealthcareProfessionals($filters: HealthcareProfessionalSearchFilters!) {\n    healthcareProfessionals(filters: $filters) {\n        id\n        names {\n            lastName\n            firstName\n            middleName\n            locale\n        }\n        degrees\n        specialties\n        facilityIds\n        spokenLanguages\n        acceptedInsurance\n        createdDate\n        updatedDate\n    }\n}": types.SearchHealthcareProfessionalsDocument,
    "\nquery SearchFacilities($filters: FacilitySearchFilters!) {\n    facilities(filters: $filters) {\n        id\n        nameEn\n        nameJa\n        mapLatitude\n        mapLongitude\n        healthcareProfessionalIds\n        contact {\n            address {\n                addressLine1En\n                addressLine2En\n                addressLine1Ja\n                addressLine2Ja\n                cityJa\n                cityEn\n                prefectureJa\n                prefectureEn\n                postalCode\n            }\n            email\n            googleMapsUrl\n            phone\n            website\n        }\n    }\n}": types.SearchFacilitiesDocument,
    "\nmutation CreateSubmission($input: CreateSubmissionInput!) {\n    createSubmission(input: $input) {\n        id\n    }\n}": types.CreateSubmissionDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery GetAllFacilities($filters: FacilitySearchFilters!) {\n    facilities(filters: $filters) {\n        id\n        nameEn\n        nameJa\n        contact {\n            googleMapsUrl\n            email\n            phone\n            website\n            address {\n                postalCode\n                prefectureEn\n                cityEn\n                addressLine1En\n                addressLine2En\n                prefectureJa\n                cityJa\n                addressLine1Ja\n                addressLine2Ja\n            }\n        }\n        mapLatitude\n        mapLongitude\n        healthcareProfessionalIds\n        createdDate\n        updatedDate\n    }\n}"): (typeof documents)["\nquery GetAllFacilities($filters: FacilitySearchFilters!) {\n    facilities(filters: $filters) {\n        id\n        nameEn\n        nameJa\n        contact {\n            googleMapsUrl\n            email\n            phone\n            website\n            address {\n                postalCode\n                prefectureEn\n                cityEn\n                addressLine1En\n                addressLine2En\n                prefectureJa\n                cityJa\n                addressLine1Ja\n                addressLine2Ja\n            }\n        }\n        mapLatitude\n        mapLongitude\n        healthcareProfessionalIds\n        createdDate\n        updatedDate\n    }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nmutation UpdateFacility($updateFacilityId: ID!, $input: UpdateFacilityInput!) {\n    updateFacility(id: $updateFacilityId, input: $input) {\n        id\n        nameEn\n        nameJa\n        contact {\n            googleMapsUrl\n            email\n            phone\n            website\n            address {\n                postalCode\n                prefectureEn\n                cityEn\n                addressLine1En\n                addressLine2En\n                prefectureJa\n                cityJa\n                addressLine1Ja\n                addressLine2Ja\n            }\n        }\n        mapLatitude\n        mapLongitude\n        healthcareProfessionalIds\n        createdDate\n        updatedDate\n    }\n}"): (typeof documents)["\nmutation UpdateFacility($updateFacilityId: ID!, $input: UpdateFacilityInput!) {\n    updateFacility(id: $updateFacilityId, input: $input) {\n        id\n        nameEn\n        nameJa\n        contact {\n            googleMapsUrl\n            email\n            phone\n            website\n            address {\n                postalCode\n                prefectureEn\n                cityEn\n                addressLine1En\n                addressLine2En\n                prefectureJa\n                cityJa\n                addressLine1Ja\n                addressLine2Ja\n            }\n        }\n        mapLatitude\n        mapLongitude\n        healthcareProfessionalIds\n        createdDate\n        updatedDate\n    }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nmutation DeleteFacility($deleteFacilityId: ID!) {\n    deleteFacility(id: $deleteFacilityId) {\n        isSuccessful\n    }\n}"): (typeof documents)["\nmutation DeleteFacility($deleteFacilityId: ID!) {\n    deleteFacility(id: $deleteFacilityId) {\n        isSuccessful\n    }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery GetAllHealthcareProfessionals($filters: HealthcareProfessionalSearchFilters!) {\n    healthcareProfessionals(filters: $filters) {\n        id\n        names {\n            firstName\n            middleName\n            lastName\n            locale\n        }\n        spokenLanguages\n        degrees\n        specialties\n        acceptedInsurance\n        facilityIds\n        createdDate\n        updatedDate\n    }\n}"): (typeof documents)["\nquery GetAllHealthcareProfessionals($filters: HealthcareProfessionalSearchFilters!) {\n    healthcareProfessionals(filters: $filters) {\n        id\n        names {\n            firstName\n            middleName\n            lastName\n            locale\n        }\n        spokenLanguages\n        degrees\n        specialties\n        acceptedInsurance\n        facilityIds\n        createdDate\n        updatedDate\n    }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery GetHealthcareProfessional($healthcareProfessionalId: ID!) {\n    healthcareProfessional(id: $healthcareProfessionalId) {\n        names {\n            firstName\n            lastName\n        }\n        id\n        specialties\n    }\n}"): (typeof documents)["\nquery GetHealthcareProfessional($healthcareProfessionalId: ID!) {\n    healthcareProfessional(id: $healthcareProfessionalId) {\n        names {\n            firstName\n            lastName\n        }\n        id\n        specialties\n    }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nmutation UpdatedHealthcareProfessional($updateHealthcareProfessionalId: ID!, $input: UpdateHealthcareProfessionalInput!) {\n    updateHealthcareProfessional(id: $updateHealthcareProfessionalId, input: $input) {\n        id\n        names {\n            firstName\n            middleName\n            lastName\n            locale\n        }\n        spokenLanguages\n        degrees\n        specialties\n        acceptedInsurance\n        facilityIds\n        createdDate\n        updatedDate\n    }\n}"): (typeof documents)["\nmutation UpdatedHealthcareProfessional($updateHealthcareProfessionalId: ID!, $input: UpdateHealthcareProfessionalInput!) {\n    updateHealthcareProfessional(id: $updateHealthcareProfessionalId, input: $input) {\n        id\n        names {\n            firstName\n            middleName\n            lastName\n            locale\n        }\n        spokenLanguages\n        degrees\n        specialties\n        acceptedInsurance\n        facilityIds\n        createdDate\n        updatedDate\n    }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nmutation DeleteHealthcareProfessional($deleteHealthcareProfessionalId: ID!) {\n    deleteHealthcareProfessional(id: $deleteHealthcareProfessionalId) {\n        isSuccessful\n    }\n}"): (typeof documents)["\nmutation DeleteHealthcareProfessional($deleteHealthcareProfessionalId: ID!) {\n    deleteHealthcareProfessional(id: $deleteHealthcareProfessionalId) {\n        isSuccessful\n    }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery SearchFacilitiesDropdown($filters: FacilitySearchFilters!) {\n    facilities(filters: $filters) {\n        id\n        contact {\n            address {\n                cityJa\n                cityEn\n            }\n        }\n    }\n}"): (typeof documents)["\nquery SearchFacilitiesDropdown($filters: FacilitySearchFilters!) {\n    facilities(filters: $filters) {\n        id\n        contact {\n            address {\n                cityJa\n                cityEn\n            }\n        }\n    }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery GetAllSubmissions($filters: SubmissionSearchFilters!) {\n    submissions(filters: $filters) {\n        id\n        googleMapsUrl\n        healthcareProfessionalName\n        spokenLanguages\n        facility {\n            id\n            mapLatitude\n            mapLongitude\n            nameEn\n            nameJa\n            contact {\n                googleMapsUrl\n                email\n                phone\n                website\n                address {\n                    postalCode\n                    prefectureEn\n                    cityEn\n                    addressLine1En\n                    addressLine2En\n                    prefectureJa\n                    cityJa\n                    addressLine1Ja\n                    addressLine2Ja\n                }\n            }\n            healthcareProfessionalIds\n        }\n        healthcareProfessionals {\n            id\n            names {\n                firstName\n                middleName\n                lastName\n                locale\n            }\n            spokenLanguages\n            degrees\n            specialties\n            acceptedInsurance\n            facilityIds\n        }\n        isUnderReview\n        isApproved\n        isRejected\n        createdDate\n        updatedDate\n        notes\n    }\n}"): (typeof documents)["\nquery GetAllSubmissions($filters: SubmissionSearchFilters!) {\n    submissions(filters: $filters) {\n        id\n        googleMapsUrl\n        healthcareProfessionalName\n        spokenLanguages\n        facility {\n            id\n            mapLatitude\n            mapLongitude\n            nameEn\n            nameJa\n            contact {\n                googleMapsUrl\n                email\n                phone\n                website\n                address {\n                    postalCode\n                    prefectureEn\n                    cityEn\n                    addressLine1En\n                    addressLine2En\n                    prefectureJa\n                    cityJa\n                    addressLine1Ja\n                    addressLine2Ja\n                }\n            }\n            healthcareProfessionalIds\n        }\n        healthcareProfessionals {\n            id\n            names {\n                firstName\n                middleName\n                lastName\n                locale\n            }\n            spokenLanguages\n            degrees\n            specialties\n            acceptedInsurance\n            facilityIds\n        }\n        isUnderReview\n        isApproved\n        isRejected\n        createdDate\n        updatedDate\n        notes\n    }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nmutation UpdatedFacilitySubmission($id: ID!, $input: UpdateSubmissionInput!) {\n    updateSubmission(id: $id, input: $input) {\n        id\n        googleMapsUrl\n        healthcareProfessionalName\n        spokenLanguages\n        facility {\n            id\n            nameEn\n            nameJa\n            contact {\n                googleMapsUrl\n                email\n                phone\n                website\n                address {\n                    postalCode\n                    prefectureEn\n                    cityEn\n                    addressLine1En\n                    addressLine2En\n                    prefectureJa\n                    cityJa\n                    addressLine1Ja\n                    addressLine2Ja\n                }\n            }\n            healthcareProfessionalIds\n            mapLatitude\n            mapLongitude\n        }\n        healthcareProfessionals {\n            id\n            names {\n                firstName\n                middleName\n                lastName\n                locale\n            }\n            spokenLanguages\n            degrees\n            specialties\n            acceptedInsurance\n            facilityIds\n        }\n        isUnderReview\n        isApproved\n        isRejected\n        createdDate\n        updatedDate\n        notes\n    }\n}"): (typeof documents)["\nmutation UpdatedFacilitySubmission($id: ID!, $input: UpdateSubmissionInput!) {\n    updateSubmission(id: $id, input: $input) {\n        id\n        googleMapsUrl\n        healthcareProfessionalName\n        spokenLanguages\n        facility {\n            id\n            nameEn\n            nameJa\n            contact {\n                googleMapsUrl\n                email\n                phone\n                website\n                address {\n                    postalCode\n                    prefectureEn\n                    cityEn\n                    addressLine1En\n                    addressLine2En\n                    prefectureJa\n                    cityJa\n                    addressLine1Ja\n                    addressLine2Ja\n                }\n            }\n            healthcareProfessionalIds\n            mapLatitude\n            mapLongitude\n        }\n        healthcareProfessionals {\n            id\n            names {\n                firstName\n                middleName\n                lastName\n                locale\n            }\n            spokenLanguages\n            degrees\n            specialties\n            acceptedInsurance\n            facilityIds\n        }\n        isUnderReview\n        isApproved\n        isRejected\n        createdDate\n        updatedDate\n        notes\n    }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery SearchHealthcareProfessionals($filters: HealthcareProfessionalSearchFilters!) {\n    healthcareProfessionals(filters: $filters) {\n        id\n        names {\n            lastName\n            firstName\n            middleName\n            locale\n        }\n        degrees\n        specialties\n        facilityIds\n        spokenLanguages\n        acceptedInsurance\n        createdDate\n        updatedDate\n    }\n}"): (typeof documents)["\nquery SearchHealthcareProfessionals($filters: HealthcareProfessionalSearchFilters!) {\n    healthcareProfessionals(filters: $filters) {\n        id\n        names {\n            lastName\n            firstName\n            middleName\n            locale\n        }\n        degrees\n        specialties\n        facilityIds\n        spokenLanguages\n        acceptedInsurance\n        createdDate\n        updatedDate\n    }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery SearchFacilities($filters: FacilitySearchFilters!) {\n    facilities(filters: $filters) {\n        id\n        nameEn\n        nameJa\n        mapLatitude\n        mapLongitude\n        healthcareProfessionalIds\n        contact {\n            address {\n                addressLine1En\n                addressLine2En\n                addressLine1Ja\n                addressLine2Ja\n                cityJa\n                cityEn\n                prefectureJa\n                prefectureEn\n                postalCode\n            }\n            email\n            googleMapsUrl\n            phone\n            website\n        }\n    }\n}"): (typeof documents)["\nquery SearchFacilities($filters: FacilitySearchFilters!) {\n    facilities(filters: $filters) {\n        id\n        nameEn\n        nameJa\n        mapLatitude\n        mapLongitude\n        healthcareProfessionalIds\n        contact {\n            address {\n                addressLine1En\n                addressLine2En\n                addressLine1Ja\n                addressLine2Ja\n                cityJa\n                cityEn\n                prefectureJa\n                prefectureEn\n                postalCode\n            }\n            email\n            googleMapsUrl\n            phone\n            website\n        }\n    }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nmutation CreateSubmission($input: CreateSubmissionInput!) {\n    createSubmission(input: $input) {\n        id\n    }\n}"): (typeof documents)["\nmutation CreateSubmission($input: CreateSubmissionInput!) {\n    createSubmission(input: $input) {\n        id\n    }\n}"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;